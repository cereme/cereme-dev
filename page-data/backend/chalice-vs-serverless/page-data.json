{"componentChunkName":"component---src-templates-blog-post-js","path":"/backend/chalice-vs-serverless/","result":{"data":{"site":{"siteMetadata":{"title":"cereme.dev","author":"cereme","siteUrl":"https://cereme.dev","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"41f6748d-a36b-512d-9b6f-923c99d0fec7","excerpt":"이 글에서는 Chalice가 Serverless framework에 비해는 가지는 장단점에 대해 간단히 다룰 것입니다.  TL;DR AWS의 S3, SNS, SQS, Cloudwatch Event의 간단한 event handler를 python 코드로 관리하실 분들에게 추천하는 프레임워크입니다. Chalice(https://github.com/aws/chalice)는 AWS(!)에서 제작한 Python을 위한 Serverless framework입니다.  You can think of it as…","html":"<p>이 글에서는 Chalice가 Serverless framework에 비해는 가지는 장단점에 대해 간단히 다룰 것입니다. </p>\n<h1 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h1>\n<p>AWS의 S3, SNS, SQS, Cloudwatch Event의 간단한 event handler를 python 코드로 관리하실 분들에게 추천하는 프레임워크입니다.</p>\n<hr>\n<p>Chalice(<a href=\"https://github.com/aws/chalice\">https://github.com/aws/chalice</a>)는 AWS(!)에서 제작한 Python을 위한 Serverless framework입니다. </p>\n<blockquote>\n<p>You can think of it as Flask/Bottle for serverless APIs.</p>\n</blockquote>\n<p>README에서도 확인하실 수 있듯이, serverless APIs의 Flask/Bottle과 같은 position을 생각하고 만들었다고 합니다.</p>\n<p>그러면 한 번 얼마나 간단한 지 살펴볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">from</span> chalice <span class=\"token keyword\">import</span> Chalice\n    \n    app <span class=\"token operator\">=</span> Chalice<span class=\"token punctuation\">(</span>app_name<span class=\"token operator\">=</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 <code class=\"language-text\">chalice deploy</code> 하면 자동으로 IAM Role, Lambda, API Gateway를 만들고 연결해줍니다! </p>\n<p>하지만 이런 API Gateway + Lambda로 serverless web service를 운영할 수 있게 해주는 기능은 다른 많은 프레임워크들에서도 지원을 합니다. </p>\n<p>Chalice의 진가는 다른 AWS 서비스와의 Intergration을 추가적인 복잡한 yaml 세팅 없이 python decorator로 설정할 수 있다는 점입니다.</p>\n<p>S3의 event도 구독할 수 있고, </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">from</span> chalice <span class=\"token keyword\">import</span> Chalice\n    \n    app <span class=\"token operator\">=</span> Chalice<span class=\"token punctuation\">(</span>app_name<span class=\"token operator\">=</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># Whenever an object is uploaded to 'mybucket'</span>\n    <span class=\"token comment\"># this lambda function will be invoked.</span>\n    \n    <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>on_s3_event</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">=</span><span class=\"token string\">'mybucket'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Object uploaded for bucket: %s, key: %s\"</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>bucket<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cloudwatch event도 생성해서 lambda와 자동으로 연결할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>schedule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cron(15 10 ? * 6L 2002-2005)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cron_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    \n    <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>schedule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rate(5 minutes)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rate_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    \n    <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>schedule</span><span class=\"token punctuation\">(</span>Rate<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> unit<span class=\"token operator\">=</span>Rate<span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rate_obj_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    \n    <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>schedule</span><span class=\"token punctuation\">(</span>Cron<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6L'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2002-2005'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cron_obj_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    app <span class=\"token operator\">=</span> chalice<span class=\"token punctuation\">.</span>Chalice<span class=\"token punctuation\">(</span>app_name<span class=\"token operator\">=</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>on_cw_event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"source\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"aws.codecommit\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">on_code_commit_changes</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>to_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>SNS Topic과 SQS도 마찬가지로 간단하게 Chalice가 자동으로 Lambda와 간편하게 연결해줍니다.</p>\n<p>이렇게 Flask-Like API는 Event-handler 관계를 Decorator-function관계로 알기 쉽게 표현할 수 있는 장점을 가지고 있습니다.</p>\n<p><a href=\"https://chalice.readthedocs.io/en/latest/\">Getting Started - Python Serverless Microframework for AWS 1.12.0 documentation</a></p>\n<p>기본적인 사용법은 위 문서에 잘 정리되어있으니 참고해주세요!</p>\n<h1 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h1>\n<ol>\n<li>\n<p>사용법이 매우 간단함</p>\n<p>이는 serverless 진영에서 대부분 내세우는 장점이지만 flask-like API를 채용했다는 장점이 있죠. 또 APIGateway + Lambda를 사용하는 use case에 있어서도 serverless framework의 YAML 작성보다는 Flask-like API가 훨씬 간편한 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">search</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.search\n        <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /search\n              <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n              <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n              <span class=\"token key atrule\">request</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">parameters</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">querystrings</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token key atrule\">query</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n                    <span class=\"token key atrule\">page</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>전 이거 좀 끔찍한거같아요…</p>\n</li>\n<li>\n<p>AWS 리소스와 쉽게 연결할 수 있음</p>\n<p>역시 serverless framework에서 S3 event에 연결하는 코드를 봐보면 Chalice의 간결함이 느껴집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> users.handler\n        <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">s3</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">bucket</span><span class=\"token punctuation\">:</span> photos\n              <span class=\"token key atrule\">event</span><span class=\"token punctuation\">:</span> s3<span class=\"token punctuation\">:</span>ObjectCreated<span class=\"token punctuation\">:</span>*\n              <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">prefix</span><span class=\"token punctuation\">:</span> uploads/\n                <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">suffix</span><span class=\"token punctuation\">:</span> .jpg</code></pre></div>\n<p>사실 Chalice에서도 decorator에 저 정보를 채워넣어야 하긴 하지만, YAML을 작성하는 것과 python decotrator에다가 값을 넣는 것은 편의성의 차이가 크다고 생각합니다.</p>\n</li>\n</ol>\n<h1 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h1>\n<ol>\n<li>Python만 지원함 </li>\n<li>\n<p>AWS의 모든 기능이 지원되는건 아님</p>\n<p>애초에 간단하게 쓸 목적으로 쓰던거라 아직 불편함을 느끼지 못하긴 했지만, 공식 문서에서 얼마든지 coverage가 떨어질 가능성을 언급했습니다.</p>\n</li>\n<li>\n<p>AWS만 지원함</p>\n<p>serverless framework는 여러 cloud vendor를 지원합니다. multi-cloud 환경을 염두에 두고있다면 Chalice는 적합하지 않을 것 같네요.</p>\n</li>\n</ol>\n<h1 id=\"취향\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%ED%96%A5\" aria-label=\"취향 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취향</h1>\n<ol>\n<li>\n<p>local package 패키징 방식</p>\n<ul>\n<li>\n<p>serverless framework</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>python<span class=\"token punctuation\">-</span>requirements\n    \n    <span class=\"token key atrule\">package</span><span class=\"token punctuation\">:</span>\n     <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n       <span class=\"token punctuation\">-</span> your_local_package/<span class=\"token important\">**</span></code></pre></div>\n<p><code class=\"language-text\">serverless-python-requirements</code> 플러그인을 사용해서 저런 식으로 Lambda에 로컬 패키지를 올릴 수 있습니다.</p>\n</li>\n<li>\n<p>Chalice</p>\n<p><code class=\"language-text\">vendor/</code> 디렉토리 밑에 패키지를 놔두면 Lambda에 올릴 때 한 단계 위 디렉토리로 옮겨줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    your-chalice-project/\n    ├── .chalice\n    │   └── config.json\n    ├── vendor\n    │   └── your-local-package\n    │       ├── __init__.py\n    │       └── foo.py\n    ├── app.py\n    └── requirements.txt</code></pre></div>\n<p>이런 식으로 로컬에서 개발하고 <code class=\"language-text\">chalice deploy</code> 로 배포하시면 Lambda function은 다음과 같은 디렉토리 구조로 구성이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    your-chalice-function/\n    ├── your-local-package\n    │   ├──  __init__.py\n    │   └──  foo.py\n    ├── app.py\n    └── requirements.txt</code></pre></div>\n<p>저는 이렇게 개발하면 개발환경에서 로컬 패키지에 대한 자동완성이 동작하지 않기 때문에 불편해서 별로 좋아하지 않는 부분인데, serverless에서 로컬 패키지를 패키징하는 방식이 plugin을 추가로 깔고 세팅에 잡다하게 추가해야하는 방식인걸 감안하면 Chalice쪽이 훨씬 더 간단하게 처리하는 걸 수도 있겠네요.</p>\n</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"Chalice, serverless framework와 비교했을 때 장단점","date":"February 26, 2020"}}},"pageContext":{"slug":"/backend/chalice-vs-serverless/","previous":{"fields":{"slug":"/frontend/react-hooks-useeffect-useref-feat-closure/"},"frontmatter":{"title":"React Hooks useEffect를 쓸 때, useState vs useRef (feat.closure)","category":"frontend","draft":false}},"next":{"fields":{"slug":"/devops/prometheus-grafana-1/"},"frontmatter":{"title":"Prometheus + Grafana로 모니터링하기 (1)","category":"devops","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}
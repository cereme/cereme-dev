{"componentChunkName":"component---src-templates-blog-post-js","path":"/backend/aws-s3-store-json-lambda-api-gateway/","result":{"data":{"site":{"siteMetadata":{"title":"cereme.dev","author":"cereme","siteUrl":"https://cereme.dev","comment":{"disqusShortName":"","utterances":"cereme/cereme.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"6caf921f-0474-5a6f-9d55-84f6e953b3cb","excerpt":"DB를 사용할 수 없는 상황에서, 간단한 json 값을 저장할 수 있는 key-value store를 AWS S3, Lambda, API Gateway를 사용하여 만들어봤습니다. 안읽어도 되는 배경설명 사물함 호랑이 서비스에서 DB Scale down을 하느라 Downtime이 발생할 수밖에 없는 구조를 채택했습니다. 그래서 maintenance 상태를 DB에서 저장하고 API로 프론트엔드에 알려주려고 했습니다. DB서버가 내려갔는데 DB…","html":"<p>DB를 사용할 수 없는 상황에서, 간단한 json 값을 저장할 수 있는 key-value store를 AWS S3, Lambda, API Gateway를 사용하여 만들어봤습니다.</p>\n<h2 id=\"안읽어도-되는-배경설명\" style=\"position:relative;\"><a href=\"#%EC%95%88%EC%9D%BD%EC%96%B4%EB%8F%84-%EB%90%98%EB%8A%94-%EB%B0%B0%EA%B2%BD%EC%84%A4%EB%AA%85\" aria-label=\"안읽어도 되는 배경설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>안읽어도 되는 배경설명</h2>\n<p><a href=\"https://lockertiger.com\">사물함 호랑이</a> 서비스에서 DB Scale down을 하느라 Downtime이 발생할 수밖에 없는 구조를 채택했습니다.</p>\n<p>그래서 maintenance 상태를 DB에서 저장하고 API로 프론트엔드에 알려주려고 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/maintain/start'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    meta<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isMaintaining<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">,</span> where<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/maintain/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    meta<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>attributes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'isMaintaining'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>DB서버가 내려갔는데 DB에 저장하고 읽어오면… 분명히 피곤할 때 짰었을거에요 ㅎㅎ;</p>\n<h2 id=\"목적\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%A0%81\" aria-label=\"목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목적</h2>\n<p>보통 간단한 정보(json, key-value)를 저장하기 위해서 Redis, memcached를 씁니다.</p>\n<p>어차피 AWS를 쓰면 <a href=\"https://aws.amazon.com/ko/elasticache/\">Elasticache</a>로 간단하게 Redis나 memcached를 관리형으로 사용 할 수 있지만, 처음 쓰시는 분은 러닝커브도 좀 있고 <strong>정말 정말</strong> 간단한 일에는 어울리지 않죠. (좋은 서비스이긴 합니다.)</p>\n<ul>\n<li>값의 변경이 잦지 않고</li>\n<li>key-value 구조이고</li>\n<li>주로 읽기만 많이 하고</li>\n<li>간단하고 빠르게 구축해야 하는</li>\n</ul>\n<p>상황에서 다음과 같은 방법을 사용해봤습니다!</p>\n<h2 id=\"구조\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0\" aria-label=\"구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조</h2>\n<h3 id=\"값을-변경할-때\" style=\"position:relative;\"><a href=\"#%EA%B0%92%EC%9D%84-%EB%B3%80%EA%B2%BD%ED%95%A0-%EB%95%8C\" aria-label=\"값을 변경할 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값을 변경할 때</h3>\n<ol>\n<li>API Gateway에 Request</li>\n<li>API Gateway가 Lambda 함수에 값 전달&#x26;호출</li>\n<li>Lambda 함수가 S3에 값을 Write</li>\n</ol>\n<h3 id=\"값을-읽을-때\" style=\"position:relative;\"><a href=\"#%EA%B0%92%EC%9D%84-%EC%9D%BD%EC%9D%84-%EB%95%8C\" aria-label=\"값을 읽을 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값을 읽을 때</h3>\n<ol>\n<li>Public Access를 켜놓은 S3 Bucket의 객체 URL에 그냥 접근</li>\n</ol>\n<h2 id=\"s3-세팅하기\" style=\"position:relative;\"><a href=\"#s3-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\" aria-label=\"s3 세팅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>S3 세팅하기</h2>\n<p><em>퍼블릭 액세스를 허용하지 않고, Lambda에서 Read 함수를 만들어서 API Gateway에서 처리하는 방법도 있습니다. 다만 글의 길이 상 생략합니다.</em></p>\n<ol>\n<li>버킷을 만든다. (만들면서 퍼블릭 액세스 차단을 비활성화 합시다.)</li>\n<li>액세스 제어 목록에서 Public Read를 활성화 한다.\n<img src=\"https://user-images.githubusercontent.com/19284878/59113312-c32f0000-897f-11e9-9adc-a520ccefceec.png\" alt=\"image\"></li>\n<li>\n<p>다른 Frontend에서 불러올거니까 CORS 설정도 해야한다. S3 버킷의 권한 > CORS 탭에서 다음과 같이 CORS 구성을 작성하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CORSConfiguration</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://s3.amazonaws.com/doc/2006-03-01/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CORSRule</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AllowedOrigin</span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AllowedOrigin</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AllowedMethod</span><span class=\"token punctuation\">></span></span>GET<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AllowedMethod</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MaxAgeSeconds</span><span class=\"token punctuation\">></span></span>3000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MaxAgeSeconds</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AllowedHeader</span><span class=\"token punctuation\">></span></span>Authorization<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AllowedHeader</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CORSRule</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CORSRule</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AllowedOrigin</span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AllowedOrigin</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AllowedMethod</span><span class=\"token punctuation\">></span></span>POST<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AllowedMethod</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MaxAgeSeconds</span><span class=\"token punctuation\">></span></span>3000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MaxAgeSeconds</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AllowedHeader</span><span class=\"token punctuation\">></span></span>Authorization<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AllowedHeader</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CORSRule</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CORSConfiguration</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>이제 S3 준비는 끝났습니다.</li>\n</ol>\n<h2 id=\"lambda-세팅하기\" style=\"position:relative;\"><a href=\"#lambda-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\" aria-label=\"lambda 세팅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda 세팅하기</h2>\n<ol>\n<li>함수를 생성합니다.</li>\n<li>근데 권한을 줄려는데, 정책 템플릿에 보면 S3에 Write할 수 있는 템플릿이 없네요. IAM 콘솔 링크로 가서 역할을 생성합시다.\n<img src=\"https://user-images.githubusercontent.com/19284878/59113655-6b44c900-8980-11e9-9943-e8e877443487.png\" alt=\"image\"></li>\n<li>Lambda 선택하고 다음을 누릅니다\n<img src=\"https://user-images.githubusercontent.com/19284878/59113772-a8a95680-8980-11e9-9f0c-6f45adfe5cc6.png\" alt=\"image\"></li>\n<li>우리는 S3에 값을 써야하기 때문에 S3FullAccess가 필요합니다.\n<img src=\"https://user-images.githubusercontent.com/19284878/59113862-dc847c00-8980-11e9-8d3b-33b2fd6152a9.png\" alt=\"image\"></li>\n<li>역할 이름, 설명 등을 쓰시고 역할을 생성합니다.</li>\n<li>다시 람다 페이지로 돌아와서, 권한에서 “기존 역할 사용”을 선택하고 아까 만든 역할을 선택한 후 함수를 생성합니다.\n<img src=\"https://user-images.githubusercontent.com/19284878/59114049-47ce4e00-8981-11e9-82ae-d619d2d8f5f6.png\" alt=\"image\">\n올바른 권한으로 잘 만들어진 모습입니다.</li>\n<li>\n<p>함수를 작성해봅시다. 코드에서는 javascript의 aws-sdk를 사용했지만 python의 boto3를 사용하셔도 좋습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">S3</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>S3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">S3</span><span class=\"token punctuation\">.</span><span class=\"token function\">putObject</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n        Bucket<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;your-bucket>'</span><span class=\"token punctuation\">,</span>\n        Key<span class=\"token operator\">:</span> <span class=\"token string\">'foo.json'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">ACL</span><span class=\"token operator\">:</span> <span class=\"token string\">'public-read'</span><span class=\"token punctuation\">,</span>\n        Body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isMaintaining<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>isMaintaining<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bucket에 json을 업로드 하기 위해서 bucket 이름, key와 value를 putObject 함수에 넘겨줬습니다.</p>\n<p>그리고 업로드한 객체가 public readable 하도록 ACL에 ‘public-read’를 지정했습니다.</p>\n<p>더 자세한 putObject 함수에 대해서는 <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property\">https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property</a> 를 참조해보세요.</p>\n</li>\n<li>함수를 저장합니다.</li>\n</ol>\n<h2 id=\"api-gateway-세팅하기\" style=\"position:relative;\"><a href=\"#api-gateway-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\" aria-label=\"api gateway 세팅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API Gateway 세팅하기</h2>\n<p>만들어놓은 Lambda 함수를 호출하기 위해서는 Trigger가 필요합니다. </p>\n<p>백엔드에서 호출하려면 REST API가 제일 간단하니, AWS의 API Gateway를 통해서 우리가 만들어놓은 Lambda 함수를 불러봅시다.</p>\n<ol>\n<li>API를 새로 만듭니다.\n<img src=\"https://user-images.githubusercontent.com/19284878/59114840-03dc4880-8983-11e9-9d1b-b60f38f29e86.png\" alt=\"image\"></li>\n<li>\n<p>작업 버튼을 눌러 리소스를 하나 만들어줍니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/19284878/59114943-35edaa80-8983-11e9-829b-2b370385d189.png\" alt=\"image\"></p>\n</li>\n<li>\n<p>만든 리소스에 대해 메소드를 만들어줍니다. Lambda 함수 입력란에 아까 만들어놓은 함수의 이름을 입력해서 선택하고, 저장합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/19284878/59115024-5e75a480-8983-11e9-83d2-2e59b3b54ce9.png\" alt=\"image\"></p>\n</li>\n<li>\n<p>API 배포를 하지 않으면 API가 동작하지 않습니다. API 배포를 눌러서 API를 배포합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/19284878/59115394-2c187700-8984-11e9-90ba-4c4d7d8e063c.png\" alt=\"image\"></p>\n</li>\n<li>\n<p>사용할 수 있는 API url이 나옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/19284878/59115753-e6a87980-8984-11e9-901d-2e4208f5a932.png\" alt=\"image\"></p>\n</li>\n</ol>\n<p>이제 백엔드에서 json body와 함께 POST하기만 하면 됩니다.</p>\n<p>읽을 때는 <code class=\"language-text\">https://s3.ap-northeast-2.amazonaws.com/&lt;your-bucket&gt;/foo.json</code>에 GET 해오면 되구요.</p>\n<p>사실 S3 + Lambda + API Gateway는 엄청 강력한 툴입니다만, 이렇게 간단한 용도로 빠르게 쓰기에도 상당히 괜찮다는 생각이 듭니다.</p>\n<p>도움이 되셨으면 좋겠으며, 피드백 환영합니다! :)</p>","frontmatter":{"title":"간단한 json storage 만들기 with S3, Lambda, API Gateway","date":"2019-06-07"}}},"pageContext":{"slug":"/backend/aws-s3-store-json-lambda-api-gateway/","previous":{"fields":{"slug":"/frontend/serve-vuejs-on-flask-setting/"},"frontmatter":{"title":"Flask에서 Vue.js 템플릿 사용하기","category":"frontend","draft":false}},"next":{"fields":{"slug":"/appdev/aws-device-farm/"},"frontmatter":{"title":"원격으로 테스트디바이스 사용하기 - AWS Device Farm","category":"appdev","draft":false}}}}}